x = True
print(x)
print(type(x))

#Comparison Operations
#Operation	Description		Operation	Description
#a == b	a equal to b		a != b	a not equal to b
#a < b	a less than b		a > b	a greater than b
#a <= b	a less than or equal to b		a >= b	a greater than or equal to b

def can_run_for_president(age):
    """Can someone of the given age run for president in the US?"""
    # The US Constitution says you must be at least 35 years old
    return age >= 35

print("Can a 19-year-old run for president?", can_run_for_president(19))
print("Can a 45-year-old run for president?", can_run_for_president(45))
#OUPUT 
#Can a 19-year-old run for president? False
#Can a 45-year-old run for president? True

3.0 == 3
#OUPUT TRUE

'3' == 3
#OUTPUT FALSE

#Comparison operators can be combined with the arithmetic operators we've already seen to express a virtually limitless range of mathematical tests. 
#For example, we can check if a number is odd by checking that the modulus with 2 returns 1:
def is_odd(n):
    return (n % 2) == 1

print("Is 100 odd?", is_odd(100))
print("Is -1 odd?", is_odd(-1))
#OUTPUT 
#Is 100 odd? False
#Is -1 odd? True

#Remember to use == instead of = when making comparisons. If you write n == 3 you are asking about the value of n. When you write n = 3 you are changing the value of n.

# Using == 1 within the above code "return (n % 2) == 1" outputs a 'TRUE' or 'FALSE'; while without it the outputs become a '0' or a '1'.

#prepared_for_weather = have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday

#I'm trying to say that I'm safe from today's weather....
#if I have an umbrella...
#or if the rain isn't too heavy and I have a hood...
#otherwise, I'm still fine unless it's raining and it's a workday
